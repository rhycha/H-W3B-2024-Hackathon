archetype enhanced_parcel_delivery_contract

asset courier {
  address : address;
  available : bool;
  location : string;
  delivery_type : string;
}

asset delivery_request {
  id : nat;
  sender : address;
  pickup_location : string;
  delivery_location : string;
  delivery_timeframe : date;
  reward : tez;
  status : string = "open"; // "open", "matched", "delivered", "disputed"
  matched_courier : option<address>;
  parcel_weight : int;
  parcel_dimensions : string;
  parcel_description : string;
}

entry create_delivery_request(sender : address, pickup_location : string, delivery_location : string, delivery_timeframe : date, reward : tez) {
  require { r1: now <= delivery_timeframe }
  effect {
    let request = {
      id = delivery_request.count() + 1;
      sender = sender;
      pickup_location = pickup_location;
      delivery_location = delivery_location;
      delivery_timeframe = delivery_timeframe;
      reward = reward;
      status = "open";
      matched_courier = none;
    }
    delivery_request.add(request)
  }
}

entry update_courier_availability(courier_address : address, available : bool, location : string, delivery_type : string) {
  effect {
    if courier.contains(courier_address) then
      courier.update(courier_address, { available = available; location = location; delivery_type = delivery_type; })
    else
      courier.add({ address = courier_address; available = available; location = location; delivery_type = delivery_type; })
  }
}

transition match_delivery_request(request_id : nat, courier_address : address) {
  called by courier_address
  require {
    r1: courier.contains(courier_address) and courier[courier_address].available;
    r2: delivery_request.contains(request_id) and delivery_request[request_id].status = "open";
    r3: courier[courier_address].location = delivery_request[request_id].pickup_location; // Simplified proximity check
    r4: courier[courier_address].delivery_type = delivery_request[request_id].delivery_type; // Delivery type compatibility
  }
  effect {
    delivery_request.update(request_id, { status = "matched"; matched_courier = some(courier_address); })
    // Lock the reward in the smart contract
  }
}

entry confirm_delivery(request_id : nat, sender_address : address) {
  called by sender_address
  require {
    r1: delivery_request.contains(request_id) and delivery_request[request_id].sender = sender_address;
    r2: delivery_request[request_id].status = "matched";
  }
  effect {
    delivery_request.update(request_id, { status = "delivered"; })
    // Release the reward to the courier
  }
}

// Dispute resolution logic
entry raise_dispute(request_id : nat, party_address : address) {
  called by party_address
  require {
    r1: delivery_request.contains(request_id);
    r2: delivery_request[request_id].status = "matched" or delivery_request[request_id].status = "delivered";
  }
  effect {
    delivery_request.update(request_id, { status = "disputed"; })
    // Trigger a dispute resolution process, which could involve an external arbitrator or a predefined resolution mechanism
  }
}
